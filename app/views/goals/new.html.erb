<h1>Goals</h1>
<% if signed_in? %>
<div class="span8">
	<br>
	
        <%= render 'shared/goal_form' %>
	<br>
	
	<%= render 'shared/log_goal' %> <br/>
	<br>	
	<h3>Graphical display:</h3>
	</br>
	
   <% end %>
</div>

<script language="javascript" type="text/javascript">
function reloadPage()
  {
  location.reload();
  }
var labelType, useGradients, nativeTextSupport, animate;

(function() {
  var ua = navigator.userAgent,
      iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
      typeOfCanvas = typeof HTMLCanvasElement,
      nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
      textSupport = nativeCanvasSupport 
        && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
  //I'm setting this based on the fact that ExCanvas provides text support for IE
  //and that as of today iPhone/iPad current text support is lame
  labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
  nativeTextSupport = labelType == 'Native';
  useGradients = nativeCanvasSupport;
  animate = !(iStuff || !nativeCanvasSupport);
})();

var Log = {
  elem: false,
  write: function(text){
    if (!this.elem) 
      this.elem = document.getElementById('log');
    this.elem.innerHTML = text;
    this.elem.style.left = (500 - this.elem.offsetWidth / 2) + 'px';
  }
};
var x=new Array();
<% @log_items_goals.each do |w| %>
x.push(<%=w.weight%>)
<%end%>
$(function() {
  init();
});
$(window).bind('page:change', function() {
  init();
});
function init(){
  //init data
y=x.length-1
if (y>3)
{
  var json = {
      'label': ['Goal'],
      'values': [
      {
        'label': 'Entry 1',
        'values': [x[y-4]]
      },
      {
        'label': 'Entry 2',
        'values': [x[y-3]]
      },
      {
        'label': 'Entry 3',
        'values': [x[y-2]]
      },
      {
        'label': 'Entry 4',
        'values': [x[y-1]]
      },
      {
        'label': 'Entry 5',
        'values': [x[y]]
      }]
      
  };
}
else if(y>2)
{
  var json = {
      'label': ['Goal'],
      'values': [
      {
        'label': 'Entry 1',
        'values': [x[y-3]]
      },
      {
        'label': 'Entry 2',
        'values': [x[y-2]]
      },
      {
        'label': 'Entry 3',
        'values': [x[y-1]]
      },
      {
        'label': 'Entry 4',
        'values': [x[y]]
      }]
      
  };
}
else if(y>1)
{
  var json = {
      'label': ['Goal'],
      'values': [
      {
        'label': 'Entry 1',
        'values': [x[y-2]]
      },
      {
        'label': 'Entry 2',
        'values': [x[y-1]]
      },
      {
        'label': 'Entry 3',
        'values': [x[y]]
      }]
      
  };
}
else if(y>0)
{
  var json = {
      'label': ['Goal'],
      'values': [
      {
        'label': 'Entry 1',
        'values': [x[y-1]]
      },
      {
        'label': 'Entry 2',
        'values': [x[y]]
      }]
      
  };
}
else if (y==0)
{
  var json = {
      'label': ['Goal'],
      'values': [
      {
        'label': 'Entry 1',
        'values': [x[y]]
      }]
      
  };
}
else 
{
var json = {
      'label': ['Goal'],
      'values': [
      {
        'label': '',
        'values': []
      }]
      
  };
}
 


  //end
  
    //init BarChart
    var barChart = new $jit.BarChart({
      //id of the visualization container
      injectInto: 'infovis',
      //whether to add animations
      animate: true,
      //horizontal or vertical barcharts
      orientation: 'vertical',
      //bars separation
      barsOffset: 20,
      //visualization offset
      Margin: {
        top:5,
        left: 5,
        right: 5,
        bottom:5
      },
      //labels offset position
      labelOffset: 5,
      //bars style
      type: useGradients? 'stacked:gradient' : 'stacked',
      //whether to show the aggregation of the values
      showAggregates:true,
      //whether to show the labels for the bars
      showLabels:true,
      //labels style
      Label: {
        type: labelType, //Native or HTML
        size: 13,
        family: 'Arial',
        color: 'white'
      },
      //add tooltips
      Tips: {
        enable: true,
        onShow: function(tip, elem) {
          tip.innerHTML = "<b>" + elem.name + "</b>: " + elem.value;
        }
      }
    });
    //load JSON data.
    barChart.loadJSON(json);
    //end
    var list = $jit.id('id-list'),
        button = $jit.id('update'),
        orn = $jit.id('switch-orientation');
    //update json on click 'Update Data'
     $jit.util.addEvent(button, 'click', function() {
      var util = $jit.util;
      if(util.hasClass(button, 'gray')) return;
      util.removeClass(button, 'white');
      util.addClass(button, 'gray');
     // barChart.updateJSON(json2);
    });
    //dynamically add legend to list
    var legend = barChart.getLegend(),
        listItems = [];
    for(var name in legend) {
      listItems.push('<div class=\'query-color\' style=\'background-color:'
          + legend[name] +'\'>&nbsp;</div>' + name);
    }
    list.innerHTML = '<li>' + listItems.join('</li><li>') + '</li>';
}
</script>

<body onload="init();">
<div id="container">

	<div id="left-container">

 		<ul id="id-list"></ul>
 		<a id="update" href="#"></a>
   
          
	</div>

	<div id="center-container">
    		<div id="infovis"></div>    
	</div>

	<div id="right-container">

		<div id="inner-details"></div>

	</div>

	<div id="log"></div>
</div>

</body>

